if (any(subset < 1 | subset > length(datalist))) {
stop("Subset indices are out of range for the datalist.")
}
}
datalist <- datalist[subset]
names_list <- names_list[subset]
stock <- if (length(stock) == length(datalist)) stock else rep(stock, length.out = length(datalist))
dose <- if (length(dose) == length(datalist)) dose else rep(dose, length.out = length(datalist))
x.axis.title <- rep(x.axis, length.out = length(datalist))
y.axis.title <- rep(y.axis, length.out = length(datalist))
calc_conc <- function(tissue, dose_value, stock_value) {
if (tissue == "dry") {
return(((dose_value * stock_value) / 200) * 10 * (0.5^(0:(8-1))))
} else if (tissue == "liquid") {
return((((dose_value * stock_value) / 200) * 10 * (0.5^(0:(8-1))) / 230) * 1000)
} else {
stop("tissue must be defined as either 'dry' or 'liquid'")
}
}
norm_values <- function(data, indices, control_mean) {
norm <- (t(data[indices, 4:11]) / control_mean) * 100
return(list(mean = rowMeans(norm, na.rm = TRUE), std = apply(norm, 1, sd, na.rm = TRUE)))
}
estimate_start <- function(x, y) {
min_val <- min(y, na.rm = TRUE)
max_val <- max(y, na.rm = TRUE)
e50 <- median(x)
slope <- -1
return(c(min = min_val, max = max_val, EC50 = e50, Hillslope = slope))
}
for (i in seq_along(datalist)) {
data <- datalist[[i]]
dose_value <- dose[i]
stock_value <- stock[i]
x_title <- x.axis.title[i]
y_title <- y.axis.title[i]
main_title <- names_list[i]
conc <- calc_conc(tissue, dose_value, stock_value)
control_mean_min <- mean(as.numeric(as.matrix(data[2:4, 2:3])), na.rm = TRUE)
control_mean_plus <- mean(as.numeric(as.matrix(data[5:7, 2:3])), na.rm = TRUE)
norm_min <- norm_values(data, 2:4, control_mean_min)
norm_plus <- norm_values(data, 5:7, control_mean_plus)
ov <- mean((control_mean_plus / control_mean_min) * 100, na.rm = TRUE)
fit_4pl <- function(conc, norm_plus) {
fourpl <- function(x, min, max, EC50, Hillslope) {
min + (max - min) / (1 + (x / EC50)^(-Hillslope))
}
start_vals <- estimate_start(conc, norm_plus$mean)
lower_bounds <- c(min = -10, max = -10, EC50 = 0, Hillslope = -5)
upper_bounds <- c(min = 200, max = 200, EC50 = 50, Hillslope = 5)
obj_func <- function(par) {
if (any(is.nan(par)) || any(is.infinite(par))) {
return(1e10)
}
y_pred <- fourpl(conc, par[1], par[2], par[3], par[4])
if (any(is.nan(y_pred)) || any(is.infinite(y_pred))) {
return(1e10)
}
sum((norm_plus$mean - y_pred)^2)
}
fit <- nlminb(start = start_vals, objective = obj_func, lower = lower_bounds, upper = upper_bounds)
if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {
stop("Optimization failed due to NaNs or Infs in the parameters.")
}
hessian <- numDeriv::hessian(func = obj_func, x = fit$par)
cov_matrix <- solve(hessian)
SE <- sqrt(diag(cov_matrix))
return(list(fit = fit, SE = SE))
}
fit_mean <- fit_4pl(conc, norm_plus)
params_mean <- fit_mean$fit$par
SE_params <- fit_mean$SE
y_max <- max(c(norm_plus$mean + norm_plus$std, norm_min$mean + norm_min$std), na.rm = TRUE)
y_min <- min(c(norm_plus$mean - norm_plus$std, norm_min$mean - norm_min$std), na.rm = TRUE)
y_padding <- 0.15 * (y_max - y_min)
par(bty = "l", mar = c(5, 5, 4, 4) + 0.1, lwd = 2, tck = -0.02, cex.axis = 1.2)
plot(conc, norm_plus$mean, log = "x", type = "n",
xlab = x_title, ylab = y_title,
ylim = c(y_min - y_padding, y_max + 1.2 * y_padding),
main = main_title, cex.lab = 1.5, cex.main = 1.5, las = 1)
if (any(norm_min$std > 0, na.rm = TRUE)) {
arrows(conc, norm_min$mean - norm_min$std, conc, norm_min$mean + norm_min$std,
length = 0.1, angle = 90, code = 3, col = "gray67")
}
if (any(norm_plus$std > 0, na.rm = TRUE)) {
arrows(conc, norm_plus$mean - norm_plus$std, conc, norm_plus$mean + norm_plus$std, length = 0.1, angle = 90, code = 3)
}
xval <- seq(min(conc), max(conc), length.out = 1000)
yval <- params_mean[1] + (params_mean[2] - params_mean[1]) / (1 + (xval / params_mean[3])^(-params_mean[4]))
lines(xval, yval, lwd = 3)
points(conc, norm_min$mean, pch = 16, col = "gray67", cex = 1.3)
points(conc, norm_plus$mean, pch = 21, col = "black", bg = "white", cex = 1.6)
legend_y <- max(norm_min$mean, na.rm = TRUE) + 1.5 * y_padding
legend("topright",
legend = c("-OV", "+OV"),
pch = c(16, 21),  # Point type: filled circle for -OV, open circle for +OV
col = c("gray67", "black"),  # Set color of points
pt.bg = c(NA, "white"),  # Set background for +OV
bty = "n",
cex = 1.2,
xpd = TRUE,
y.intersp = 0.8,
text.col = "black")
n2.sum <- data.frame(
"Parameters" = c("EC50", "max", "min", "Hillslope"),
"Mean" = round(c(params_mean[3], params_mean[2], params_mean[1], params_mean[4]), 2),
"SE" = round(SE_params, 2),
stringsAsFactors = FALSE
)
cat(sprintf("Summary for: \033[1m%s\033[0m\n", main_title))
print_summary <- function(n2.sum, indentation) {
cat(sprintf("%s%-12s %-6s %-6s\n", indentation, "[Parameters]", "[Mean]", " SE"))
cat(sprintf("%s%s\n", indentation, strrep("-", 9 + 9 + 9)))
for (row in seq_len(nrow(n2.sum))) {
cat(sprintf("%s%-12s %-6.2f  %-3.2f\n", indentation,
n2.sum$Parameters[row], n2.sum$Mean[row], n2.sum$SE[row]))
}
}
print_summary(n2.sum, paste(rep(" ", 10), collapse = ""))
cat(sprintf("%s%s\n", paste(rep(" ", 10), collapse = ""), strrep("-", 9 + 9 + 9)))
if (ov >= 60 && ov <= 80) {
cat(sprintf("OV%%: %.2f -> Within optimal range (60-80%%)\n", round(ov, 2)))
} else {
cat(sprintf("OV%%: %.2f -> \033[31mOutside optimal range (60-80%%)\033[0m\n", round(ov, 2)))
}
if (any(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE)) || any(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))) {
if (any(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE))) {
high_sd_rows <- which(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE))
cat(sprintf("\033[31mSD above 20%% | Sample %s (-OV)\033[0m\n", paste(high_sd_rows, collapse = ", ")))
}
if (any(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))) {
high_sd_rows <- which(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))
cat(sprintf("\033[31mSD above 20%% | Sample %s (+OV)\033[0m\n", paste(high_sd_rows, collapse = ", ")))
}
}
for (i in seq_along(norm_min$mean)) {
other_means <- norm_min$mean[-i]
if (all(norm_min$mean[i] < 0.3 * other_means)) {
cat("\033[31mMatrix effect detected\033[0m\n")
}
}
}
})
}
n2dr(test, stock = c(20, 30, 200), dose = c(5, 10, 5),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr <- function(datalist, stock, dose, tissue = "liquid",
x.axis = "", y.axis = "", subset = NULL) {
if (missing(stock) || missing(dose)) {
stop("Both 'stock' and 'dose' must be provided.")
}
suppressWarnings({
if (length(datalist) == 0 || all(sapply(datalist, function(x) dim(x)[1] == 0))) {
stop("Empty dataset: No data available for analysis.")
}
names_list <- names(datalist)
if (is.null(subset)) {
subset <- seq_along(datalist)
} else {
subset <- as.integer(subset)
if (any(subset < 1 | subset > length(datalist))) {
stop("Subset indices are out of range for the datalist.")
}
}
datalist <- datalist[subset]
names_list <- names_list[subset]
stock <- if (length(stock) == length(datalist)) stock else rep(stock, length.out = length(datalist))
dose <- if (length(dose) == length(datalist)) dose else rep(dose, length.out = length(datalist))
x.axis.title <- rep(x.axis, length.out = length(datalist))
y.axis.title <- rep(y.axis, length.out = length(datalist))
calc_conc <- function(tissue, dose_value, stock_value) {
if (tissue == "dry") {
return(((dose_value * stock_value) / 200) * 10 * (0.5^(0:(8-1))))
} else if (tissue == "liquid") {
return((((dose_value * stock_value) / 200) * 10 * (0.5^(0:(8-1))) / 230) * 1000)
} else {
stop("tissue must be defined as either 'dry' or 'liquid'")
}
}
norm_values <- function(data, indices, control_mean) {
norm <- (t(data[indices, 4:11]) / control_mean) * 100
return(list(mean = rowMeans(norm, na.rm = TRUE), std = apply(norm, 1, sd, na.rm = TRUE)))
}
estimate_start <- function(x, y) {
min_val <- min(y, na.rm = TRUE)
max_val <- max(y, na.rm = TRUE)
e50 <- median(x)
slope <- -1
return(c(min = min_val, max = max_val, EC50 = e50, Hillslope = slope))
}
for (i in seq_along(datalist)) {
data <- datalist[[i]]
dose_value <- dose[i]
stock_value <- stock[i]
x_title <- x.axis.title[i]
y_title <- y.axis.title[i]
main_title <- names_list[i]
conc <- calc_conc(tissue, dose_value, stock_value)
control_mean_min <- mean(as.numeric(as.matrix(data[2:4, 2:3])), na.rm = TRUE)
control_mean_plus <- mean(as.numeric(as.matrix(data[5:7, 2:3])), na.rm = TRUE)
norm_min <- norm_values(data, 2:4, control_mean_min)
norm_plus <- norm_values(data, 5:7, control_mean_plus)
ov <- mean((control_mean_plus / control_mean_min) * 100, na.rm = TRUE)
fit_4pl <- function(conc, norm_plus) {
fourpl <- function(x, min, max, EC50, Hillslope) {
min + (max - min) / (1 + (x / EC50)^(-Hillslope))
}
start_vals <- estimate_start(conc, norm_plus$mean)
lower_bounds <- c(min = -10, max = -10, EC50 = 0, Hillslope = -5)
upper_bounds <- c(min = 200, max = 200, EC50 = 50, Hillslope = 5)
obj_func <- function(par) {
if (any(is.nan(par)) || any(is.infinite(par))) {
return(1e10)
}
y_pred <- fourpl(conc, par[1], par[2], par[3], par[4])
if (any(is.nan(y_pred)) || any(is.infinite(y_pred))) {
return(1e10)
}
sum((norm_plus$mean - y_pred)^2)
}
fit <- nlminb(start = start_vals, objective = obj_func, lower = lower_bounds, upper = upper_bounds)
if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {
stop("Optimization failed due to NaNs or Infs in the parameters.")
}
hessian <- numDeriv::hessian(func = obj_func, x = fit$par)
cov_matrix <- solve(hessian)
SE <- sqrt(diag(cov_matrix))
return(list(fit = fit, SE = SE))
}
fit_mean <- fit_4pl(conc, norm_plus)
params_mean <- fit_mean$fit$par
SE_params <- fit_mean$SE
y_max <- max(c(norm_plus$mean + norm_plus$std, norm_min$mean + norm_min$std), na.rm = TRUE)
y_min <- min(c(norm_plus$mean - norm_plus$std, norm_min$mean - norm_min$std), na.rm = TRUE)
y_padding <- 0.15 * (y_max - y_min)
par(bty = "l", mar = c(5, 5, 4, 4) + 0.1, lwd = 2, tck = -0.02, cex.axis = 1.2)
plot(conc, norm_plus$mean, log = "x", type = "n",
xlab = x_title, ylab = y_title,
ylim = c(y_min - y_padding, y_max + 1.2 * y_padding),
main = main_title, cex.lab = 1.5, cex.main = 1.5, las = 1)
if (any(norm_min$std > 0, na.rm = TRUE)) {
arrows(conc, norm_min$mean - norm_min$std, conc, norm_min$mean + norm_min$std,
length = 0.1, angle = 90, code = 3, col = "gray67")
}
if (any(norm_plus$std > 0, na.rm = TRUE)) {
arrows(conc, norm_plus$mean - norm_plus$std, conc, norm_plus$mean + norm_plus$std, length = 0.1, angle = 90, code = 3)
}
xval <- seq(min(conc), max(conc), length.out = 1000)
yval <- params_mean[1] + (params_mean[2] - params_mean[1]) / (1 + (xval / params_mean[3])^(-params_mean[4]))
lines(xval, yval, lwd = 3)
points(conc, norm_min$mean, pch = 16, col = "gray67", cex = 1.3)
points(conc, norm_plus$mean, pch = 21, col = "black", bg = "white", cex = 1.6)
legend_y <- max(norm_min$mean, na.rm = TRUE) + 1.5 * y_padding
legend("topright",
legend = c("-OV", "+OV"),
pch = c(16, 21),  # Point type: filled circle for -OV, open circle for +OV
col = c("gray67", "black"),  # Set color of points
pt.bg = c(NA, "white"),  # Set background for +OV
bty = "n",
cex = 1.2,
xpd = TRUE,
y.intersp = 0.8,
text.col = "black")
n2.sum <- data.frame(
"Parameters" = c("EC50", "max", "min", "Hillslope"),
"Mean" = round(c(params_mean[3], params_mean[2], params_mean[1], params_mean[4]), 2),
"SE" = round(SE_params, 2),
stringsAsFactors = FALSE
)
cat(sprintf("Summary for: \033[1m%s\033[0m\n", main_title))
print_summary <- function(n2.sum, indentation) {
cat(sprintf("%s%-12s %-6s %-6s\n", indentation, "[Parameters]", "[Mean]", " SE"))
cat(sprintf("%s%s\n", indentation, strrep("-", 9 + 9 + 9)))
for (row in seq_len(nrow(n2.sum))) {
cat(sprintf("%s%-12s %-6.2f  %-3.2f\n", indentation,
n2.sum$Parameters[row], n2.sum$Mean[row], n2.sum$SE[row]))
}
}
print_summary(n2.sum, paste(rep(" ", 10), collapse = ""))
cat(sprintf("%s%s\n", paste(rep(" ", 10), collapse = ""), strrep("-", 9 + 9 + 9)))
if (ov >= 60 && ov <= 80) {
cat(sprintf("OV%%: %.2f -> Within optimal range (60-80%%)\n", round(ov, 2)))
} else {
cat(sprintf("OV%%: %.2f -> \033[31mOutside optimal range (60-80%%)\033[0m\n", round(ov, 2)))
}
if (any(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE)) || any(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))) {
if (any(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE))) {
high_sd_rows <- which(norm_min$std > 0.2 * mean(norm_min$mean, na.rm = TRUE))
cat(sprintf("\033[31mSD above 20%% | Sample %s (-OV)\033[0m\n", paste(high_sd_rows, collapse = ", ")))
}
if (any(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))) {
high_sd_rows <- which(norm_plus$std > 0.2 * mean(norm_plus$mean, na.rm = TRUE))
cat(sprintf("\033[31mSD above 20%% | Sample %s (+OV)\033[0m\n", paste(high_sd_rows, collapse = ", ")))
}
}
for (i in seq_along(norm_min$mean)) {
other_means <- norm_min$mean[-i]
if (all(norm_min$mean[i] < 0.3 * other_means)) {
cat("\033[31mMatrix effect detected\033[0m\n")
}
}
}
})
}
n2dr(test, stock = c(20, 30, 200), dose = c(5, 10, 5),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
test <- upload_xl('C46:N53')
test2 <- upload_xl('C46:N53')
n2dr(test2, 5, 10, subset=13)
n2dr(test, 10, 33.3, subset=4)
n2dr(test, 10, 33.3, subset=4, y.axis = "% cell survival", x.axis = "ng/mL")
test <- upload_xl("C46:N53")
test <- upload_xl("C46:N53")
n2dr(test, 4, 3.33, subset=12:15)
n2dr(test, 10, 3.33, subset=12)
n2dr(test, 5, 3.33, subset=12)
n2dr(test, 4, 3.33, subset=12)
upload_xl <- function(range = "C46:N53") {
cat("Please select the Excel file.\n")
filename <- file.choose()
if (tolower(tools::file_ext(filename)) != "xls" && tolower(tools::file_ext(filename)) != "xlsx") {
stop("Invalid filetype, please select .xlsx, or .xls-based file. Import aborted.")
}
if (!grepl("^([A-Z]+[0-9]+:[A-Z]+[0-9]+)$", range)) {
stop("Invalid range. Use format 'C46:N53'.")
}
data_list <- list()
for (sheet in excel_sheets(filename)) {
cat("Reading sheet:", sheet, "\n")
df <- tryCatch({
suppressMessages(read_excel(filename, sheet = sheet, range = range, col_names = FALSE))
}, error = function(e) {
stop("Error reading sheet:", sheet, ". Import aborted.")
})
if (nrow(df) == 0 || ncol(df) == 0) {
stop("Selected range contains no data in sheet: ", sheet, ". Import aborted.")
}
df[] <- lapply(df, function(x) {
x <- gsub(",", ".", x)  # Convert commas to dots
numeric_x <- suppressWarnings(as.numeric(x))  # Convert to numeric
if (any(is.na(numeric_x))) {
stop("Non-numeric character detected, import aborted.")
}
return(numeric_x)
})
if (nrow(df) != 8 || ncol(df) != 12) {
stop("Datasets outside expected dimensions (8x12). Import aborted.")
}
data_list[[sheet]] <- df
}
if (!exists("upload_xl_result", envir = parent.frame())) {
return(data_list)
}
return(data_list)
}
upload_xl("C46:N53")
library(readxl)
upload_xl("C46:N53")
upload_tx()
upload_txt <- function() {
cat("Please select the TXT file.\n")
filename <- file.choose()
# Check file extension
if (tolower(tools::file_ext(filename)) != "txt") {
stop("Unvalid filetype, please select .txt-based file. Import aborted.")
}
cat("Importing data from:", filename, "\n")
raw_text <- suppressWarnings(readLines(filename, warn = FALSE))  # Suppress warnings from readLines()
datasets <- unlist(strsplit(paste(raw_text, collapse = "\n"), "\n\n"))
data_list <- lapply(seq_along(datasets), function(i) {
df <- tryCatch({
temp_df <- suppressWarnings(read.table(text = datasets[i], header = FALSE, stringsAsFactors = FALSE, sep = ""))
temp_df[] <- lapply(temp_df, function(x) {
x <- gsub(",", ".", x)
if (any(is.na(suppressWarnings(as.numeric(x))))) {
stop("Non-numeric character(s) detected. Import aborted.")
}
return(as.numeric(x))
})
if (nrow(temp_df) != 8 || ncol(temp_df) != 12) {
stop("Datasets outside expected dimensions (8x12), check if datasets are separated by double line breaks. Import aborted.")
}
return(temp_df)
}, error = function(e) {
stop(e$message)
})
return(df)
})
names(data_list) <- paste0("dataset_", seq_along(datasets))
cat("Data imported and stored.\n")
return(data_list)
}
upload_txt()
upload_txt <- function() {
cat("Please select the TXT file.\n")
filename <- file.choose()
# Check file extension
if (tolower(tools::file_ext(filename)) != "txt") {
stop("Unvalid filetype, please select .txt-based file. Import aborted.")
}
cat("Importing data from:", filename, "\n")
raw_text <- suppressWarnings(readLines(filename, warn = FALSE))  # Suppress warnings from readLines()
datasets <- unlist(strsplit(paste(raw_text, collapse = "\n"), "\n\n"))
data_list <- lapply(seq_along(datasets), function(i) {
df <- tryCatch({
temp_df <- suppressWarnings(read.table(text = datasets[i], header = FALSE, stringsAsFactors = FALSE, sep = ""))
temp_df[] <- lapply(temp_df, function(x) {
x <- gsub(",", ".", x)
if (any(is.na(suppressWarnings(as.numeric(x))))) {
stop("Non-numeric character(s) detected. Import aborted.")
}
return(as.numeric(x))
})
if (nrow(temp_df) != 8 || ncol(temp_df) != 12) {
stop("Datasets outside expected dimensions (8x12), check if datasets are separated by double line breaks. Import aborted.")
}
return(temp_df)
}, error = function(e) {
stop(e$message)
})
return(df)
})
names(data_list) <- paste0("dataset_", seq_along(datasets))
return(data_list)
}
upload_txt()
upload_txt()
upload_txt <- function() {
cat("Please select the TXT file.\n")
filename <- file.choose()
if (tolower(tools::file_ext(filename)) != "txt") {
stop("Unvalid filetype, please select .txt-based file. Import aborted.")
}
raw_text <- suppressWarnings(readLines(filename, warn = FALSE))
datasets <- unlist(strsplit(paste(raw_text, collapse = "\n"), "\n\n"))
data_list <- lapply(seq_along(datasets), function(i) {
df <- tryCatch({
temp_df <- suppressWarnings(read.table(text = datasets[i], header = FALSE, stringsAsFactors = FALSE, sep = ""))
temp_df[] <- lapply(temp_df, function(x) {
x <- gsub(",", ".", x)
if (any(is.na(suppressWarnings(as.numeric(x))))) {
stop("Non-numeric character(s) detected. Import aborted.")
}
return(as.numeric(x))
})
if (nrow(temp_df) != 8 || ncol(temp_df) != 12) {
stop("Datasets outside expected dimensions (8x12), check if datasets are separated by double line breaks. Import aborted.")
}
return(temp_df)
}, error = function(e) {
stop(e$message)
})
return(df)
})
names(data_list) <- paste0("dataset_", seq_along(datasets))
return(data_list)
}
upload_txt()
upload_txt <- function() {
cat("Please select the TXT file.\n")
filename <- file.choose()
if (tolower(tools::file_ext(filename)) != "txt") {
stop("Unvalid filetype, please select .txt-based file. Import aborted.")
}
raw_text <- suppressWarnings(readLines(filename, warn = FALSE))
datasets <- unlist(strsplit(paste(raw_text, collapse = "\n"), "\n\n"))
data_list <- lapply(seq_along(datasets), function(i) {
df <- tryCatch({
temp_df <- suppressWarnings(read.table(text = datasets[i], header = FALSE, stringsAsFactors = FALSE, sep = ""))
temp_df[] <- lapply(temp_df, function(x) {
x <- gsub(",", ".", x)
if (any(is.na(suppressWarnings(as.numeric(x))))) {
stop("Non-numeric character(s) detected. Import aborted.")
}
return(as.numeric(x))
})
if (nrow(temp_df) != 8 || ncol(temp_df) != 12) {
stop("Datasets outside expected dimensions (8x12), check if datasets are separated by double line breaks. Import aborted.")
}
return(temp_df)
}, error = function(e) {
stop(e$message)
})
return(df)
})
names(data_list) <- paste0("dataset_", seq_along(datasets))
return(data_list)
}
n2dr(example_analysis, stock = c(20, 30, 5), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
example_analysis <- upload_xl("C46:N53")
n2dr(example_analysis, stock = c(20, 30, 5), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr(example_analysis, stock = c(20, 30, 2000), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr(example_analysis, stock = c(20, 30, 5), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr(example_analysis, stock = c(20, 30, 1000), dose = c(5, 10, 5),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr(example_analysis, stock = c(20, 30, 5), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
n2dr(example_analysis, stock = c(20, 30, 40), dose = c(5, 10, 10),
y.axis="% cell survival", x.axis = c("pg/mL", "mg TE/mL", "mg TE/mL"),
subset = 1:3)
